######################################
20250410
与多个远程库互相同步
1.先删除关联名为origin的远程库（不删除也行）
	git remote rm origin
2.先关联github的远程库
	git remote add github git@github.com:cokerxi/test
  这时远程库叫github，而不叫origin
3.再关联gitee远程库
	git remote add gitee git@gitee.com:cokerxi/test
  这时远程库就叫gitee
4.现在用git remote -v查看远程库信息，就可以看到两个远程库
5.推送到github就用git push github master
  推送到gitee就用git push gitee master

忽略某些文件时，需要在当前库下新建.gitignore文件
其内容示例如下
	#排除所有.开头的隐藏文件
	.*
	#排除所有.class文件
	*.class
	#不排除.gitignore和app.class
	!.gitignore
	!app.class
######################################
20250409
创建并切换分支，git checkout -b dev
	-b表示创建并切换
	以上相当于两步git branch dev,
		      git checkout dev
	查看分支是否创建并切换成功
	git branch
合并分支
	git checkout main
	git merge dev
删除分支
	git branch -d dev
查看分支应该只剩main分支
	git branch
使用switch创建切换分支
	git switch -c dev
使用switch切换分支
	git switch main
合并两个都已经修改过的分支
	准备一个新的分支git checkout -b dev
	修改readme的最后一行
	在dev分支上提交，git a readme
			 git cm
	切换到main分支
	修改readme
	在main分支上提交，git a readme&&git cm
	此时合并两个分支会出现冲突
		git merge dev
	可以直接查看readme的内容
		cat readme
	在main分支再次提交readme
		git a && git cm
	最后删除dev分支
		git branch -d dev
	用git log --graph可查看分支合并图
合并分支时加上--no-ff参数可以用普通模式合并，合并后有历史分支可以看出曾经做过的合并，而fast forward合并就看不出来曾经的合并
	git merge --no-ff -m "merge with no-ff" dev
	git log --graph --pretty=online --abbrev-commit
多人协作的工作模式通常是这样：
 1. 首先，可以尝试用git push origin <branch-name>推送自己的修改； 
2. 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并； 
3. 如果合并有冲突，则解决冲突，并在本地提交；4. 没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！  如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
######################################
20250408
远程关联库
git remote add origin git@github.com:cokerxi/test
查看是否关联成功，git remote -v
git branch -M main
git push -u origin main
查看远程库
git remote -v
删除远程库，不是物理删除远程库，而是删除本地与远程的连接
git remote rm origin

1.丢弃工作区的修改时用命令
git checkout  file
2.已经推送到暂缓区的修改分为两步
第一步git reset HEAD file
第二步git checkout file
3.已经提交到版本库的用版本回退
用git reset --hard HEAD^ 回退到上一个版本
也可用git reset --hard （commit id）来退回上一个版本
git reflog记录每一次命令和commit id
删除文件跟添加文件操作一样，就是把add改为rm
######################################
2025年4月7日
查看全局别称
cat ~/.gitconfig
######################################
2025年4月1日
git config --global alias.cm 'commit -m "up"'
######################################
安装git
######################################
安装完成后，还需要最后一步设置，在命令行输入：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"


######################################
创建版本库
######################################
创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：

$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit

通过git init命令把这个目录变成Git可以管理的仓库：
$ git init
Initialized empty Git repository in /Users/michael/learngit/.git
当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万         不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。

把一个文件放到Git仓库只需要两步。
第一步，用命令git add告诉Git，把文件添加到仓库：
$ git add readme.txt
第二步，用命令git commit告诉Git，把文件提交到仓库：
$ git commit -m "wrote a readme file"
git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好        是有意义的，这样你就能从历史记录里方便地找到改动记录。

######################################
时光穿梭机
######################################
上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令        看看：
$ git diff readme.txt 

######################################
git全局变量
######################################
1.查看已有的配置 
git config --list
git config --list |grep alias
2. Git全局配置的用户名邮箱配置
  git config --global user.name “github’s Name”
  git config --global user.email “github@xx.com”
  git config --list //然后查看自己的配置
3. Git单个仓库的用户名邮箱配置
  git config user.name “gitlab’s Name”
  git config user.email “gitlab@xx.com”
  git config --list
4.移除某个全局配置 
  git config --global --unset <option>  
  例如移除 上面的配置  git  config --global --unset  user.name
######################################
git在本机上的别名配置
######################################
1.$ vi .bash_profile
修改配置文件
	alias gpush='git push origin master'
        alias gpull='git pull origin master'
        alias gcom='git commit -m "update"'
2.增加并确认文件可以用一行命令
	$ git add 111 && gcom
我自己定义的别名
git config --global alias.a add
git config --global alias.b branch
git config --global alias.ck checkout
git config --global alias.l log
git config --global alias.c commit
git config --global alias.cm 'commit -m "up"'
git config --global alias.p pull
git config --global alias.ps push
git config --global alias.s status
git config --global alias.
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
######################################
从github克隆到本机，远程同步的步骤
1.在github创建仓库
2.将本机的ssh key 添加到github
        1.在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件
        2.如果没有，创建ssh key 
         $ ssh-keygen -t rsa -C "youremail@example.com"
         主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件
         id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人
        3.登陆GitHub，打开“Account settings”，“SSH Keys”页面
         点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
3.从git克隆到本地
        $ git clone git@github.com:cokerxi/document.git
4.对克隆到本地的文件进行增删改查以后推送到github
        第一次推送
        $ git push -u origin master
        以后推送
        $ git push origin master
5.如果在别的电脑上或者直接在github上修改文件以后，需要现在本机更新一下
	$ git pull origin  master

6.克隆私有仓库git clone git@github.com:cokerxi/仓库名，仓库名后面不要带.git
######################################
#查看工作区与版本库的区别
git diff HEAD -- file
######################################
撤销修改
######################################
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
######################################
#删除文件
rm file
git rm file
git commit -m "remove file"
######################################
#恢复删除的文件
git checkout -- file
######################################
远程仓库
1.创建ssh key
sh-keygen -t rsa -C "youremail@example.com"
2.在github中添加ssh key
sshkey在自己电脑的家目录/.ssh/id_rsa.pub文件中
3.在github上创建一个git仓库
4.关联远程仓库
$ git remote add origin git@github.com:michaelliao/learngit.git
5.推送
第一次推送
$ git push -u origin master
以后推送
$ git push origin master

上面是先有本地库，然后有远程库的时候如何关联
最好的方式是先创建远程库，然后克隆远程库
1.在github或自己的服务器创建仓库并初始化
2.$ git clone git@github.com:xxx/xxx.git
#####################################
远程仓库的操作
1.将远程仓库合并到本地,此情况例如换了台电脑但进度比远程的要靠后就需要此更新一下（不过网上不建议如此操作http://www.oschina.net/translate/git-fetch-and-merge?cmp）
$ git pull origin  master
2.推送
$ git push origin master
默认服务器拒绝推送，在.git/config中添加
[receive]
denyCurrentBranch = ignore
#####################################
创建与合并分支
#####################################
首先，我们创建dev分支，然后切换到dev分支：
$ git checkout -b dev
Switched to a new branch 'dev'
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev
Switched to branch 'dev'

查看当前分支
$ git branch

合并分支
git merge命令用于合并指定分支到当前分支
$ git merge dev
合并完成后，就可以放心地删除dev分支了
$ git branch -d dev

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
