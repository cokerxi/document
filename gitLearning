######################################
我自己定义的别名
git config --global alias.a add
git config --global alias.b branch
git config --global alias.c checkout
git config --global alias.l log
git config --global alias.m commit
git config --global alias.p pull
git config --global alias.ps push
git config --global alias.s status
git config --global alias.
git config --global alias.
#####################################
#查看工作区与版本库的区别
git diff HEAD -- file
######################################
#撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
######################################
#删除文件
rm file
git rm file
git commit -m "remove file"
######################################
#恢复删除的文件
git checkout -- file
######################################
远程仓库
1.创建ssh key
sh-keygen -t rsa -C "youremail@example.com"
2.在github中添加ssh key
sshkey在自己电脑的家目录/.ssh/id_rsa.pub文件中
3.在github上创建一个git仓库
4.关联远程仓库
$ git remote add origin git@github.com:michaelliao/learngit.git
5.推送
第一次推送
$ git push -u origin master
以后推送
$ git push origin master

上面是先有本地库，然后有远程库的时候如何关联
最好的方式是先创建远程库，然后克隆远程库
1.在github或自己的服务器创建仓库并初始化
2.$ git clone git@github.com:xxx/xxx.git
#####################################
远程仓库的操作
1.将远程仓库合并到本地,此情况例如换了台电脑但进度比远程的要靠后就需要此更新一下（不过网上不建议如此操作http://www.oschina.net/translate/git-fetch-and-merge?cmp）
$ git pull origin  master
2.推送
$ git push origin master
默认服务器拒绝推送，在.git/config中添加
[receive]
denyCurrentBranch = ignore
#####################################
#####################################
#创建分支
首先，我们创建dev分支，然后切换到dev分支：
$ git checkout -b dev
Switched to a new branch 'dev'
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev
Switched to branch 'dev'
######################################
#查看当前分支
$ git branch
######################################
#合并分支
git merge命令用于合并指定分支到当前分支
$ git merge dev
合并完成后，就可以放心地删除dev分支了
$ git branch -d dev
######################################
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
